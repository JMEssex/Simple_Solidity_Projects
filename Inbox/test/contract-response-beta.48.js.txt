AbstractContract {
  providersModuleFactory: ProvidersModuleFactory {},
  providerDetector: ProviderDetector {},
  providerResolver: ProviderResolver {
    providersModuleFactory: ProvidersModuleFactory {}
  },
  givenProvider: null,
  _currentProvider: CustomProvider {
    host: 'CustomProvider',
    connection: b {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      options: [Object],
      engine: [d],
      manager: [u],
      sendAsync: [Function: bound],
      send: [Function: bound],
      close: [Function: bound],
      _queueRequest: [Function: bound],
      _processRequestQueue: [Function: bound],
      _requestQueue: [],
      _requestInProgress: false
    }
  },
  _defaultAccount: undefined,
  _defaultBlock: 'latest',
  _transactionBlockTimeout: 50,
  _transactionConfirmationBlocks: 24,
  _transactionPollingTimeout: 750,
  _defaultGasPrice: undefined,
  _defaultGas: undefined,
  BatchRequest: [Function],
  contractModuleFactory: ContractModuleFactory {
    utils: {
      randomHex: [Function: randomHex],
      jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
      hexToAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      getUnitValue: [Function: getUnitValue],
      fromWei: [Function: fromWei],
      toWei: [Function: toWei],
      toChecksumAddress: [Function: toChecksumAddress],
      keccak256: [Function],
      sha3: [Function],
      toDecimal: [Function: hexToNumber],
      hexToNumber: [Function: hexToNumber],
      fromDecimal: [Function: numberToHex],
      numberToHex: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      utf8ToHex: [Function: utf8ToHex],
      toAscii: [Function: hexToAscii],
      fromAscii: [Function: asciiToHex],
      padLeft: [Function: leftPad],
      padRight: [Function: rightPad],
      getSignatureParameters: [Function: getSignatureParameters],
      isAddress: [Function: isAddress],
      isBN: [Function: isBN],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toBN: [Function: toBN],
      toHex: [Function: toHex],
      hexToNumberString: [Function: hexToNumberString],
      toTwosComplement: [Function: toTwosComplement],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      isBloom: [Function: isBloom],
      isTopic: [Function: isTopic],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      soliditySha3: [Function: soliditySha3]
    },
    formatters: {
      outputBigNumberFormatter: [Function: outputBigNumberFormatter],
      isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
      inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
      inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
      txInputFormatter: [Function: txInputFormatter],
      inputCallFormatter: [Function: inputCallFormatter],
      inputTransactionFormatter: [Function: inputTransactionFormatter],
      inputSignFormatter: [Function: inputSignFormatter],
      outputTransactionFormatter: [Function: outputTransactionFormatter],
      outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
      outputBlockFormatter: [Function: outputBlockFormatter],
      inputLogFormatter: [Function: inputLogFormatter],
      outputLogFormatter: [Function: outputLogFormatter],
      inputPostFormatter: [Function: inputPostFormatter],
      outputPostFormatter: [Function: outputPostFormatter],
      inputAddressFormatter: [Function: inputAddressFormatter],
      outputSyncingFormatter: [Function: outputSyncingFormatter]
    },
    abiCoder: AbiCoder {
      utils: [Object],
      ethersAbiCoder: [AbiCoder]
    },
    accounts: Accounts {
      providersModuleFactory: ProvidersModuleFactory {},
      providerDetector: ProviderDetector {},
      providerResolver: [ProviderResolver],
      givenProvider: null,
      _currentProvider: [CustomProvider],
      _defaultAccount: undefined,
      _defaultBlock: 'latest',
      _transactionBlockTimeout: 50,
      _transactionConfirmationBlocks: 24,
      _transactionPollingTimeout: 750,
      _defaultGasPrice: undefined,
      _defaultGas: undefined,
      BatchRequest: [Function],
      transactionSigner: undefined,
      formatters: [Object],
      chainIdMethod: [ChainIdMethod],
      getGasPriceMethod: [GetGasPriceMethod],
      getTransactionCountMethod: [GetTransactionCountMethod],
      defaultKeyName: 'web3js_wallet',
      accounts: {},
      accountsIndex: 0,
      wallet: [Accounts]
    },
    methodModuleFactory: ModuleFactory {
      subscriptionsFactory: [SubscriptionsFactory],
      formatters: [Object],
      utils: [Object]
    }
  },
  abiCoder: AbiCoder {
    utils: {
      randomHex: [Function: randomHex],
      jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
      hexToAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      getUnitValue: [Function: getUnitValue],
      fromWei: [Function: fromWei],
      toWei: [Function: toWei],
      toChecksumAddress: [Function: toChecksumAddress],
      keccak256: [Function],
      sha3: [Function],
      toDecimal: [Function: hexToNumber],
      hexToNumber: [Function: hexToNumber],
      fromDecimal: [Function: numberToHex],
      numberToHex: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      utf8ToHex: [Function: utf8ToHex],
      toAscii: [Function: hexToAscii],
      fromAscii: [Function: asciiToHex],
      padLeft: [Function: leftPad],
      padRight: [Function: rightPad],
      getSignatureParameters: [Function: getSignatureParameters],
      isAddress: [Function: isAddress],
      isBN: [Function: isBN],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toBN: [Function: toBN],
      toHex: [Function: toHex],
      hexToNumberString: [Function: hexToNumberString],
      toTwosComplement: [Function: toTwosComplement],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      isBloom: [Function: isBloom],
      isTopic: [Function: isTopic],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      soliditySha3: [Function: soliditySha3]
    },
    ethersAbiCoder: AbiCoder {
      coerceFunc: [Function]
    }
  },
  utils: {
    randomHex: [Function: randomHex],
    jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
    hexToAscii: [Function: hexToAscii],
    asciiToHex: [Function: asciiToHex],
    getUnitValue: [Function: getUnitValue],
    fromWei: [Function: fromWei],
    toWei: [Function: toWei],
    toChecksumAddress: [Function: toChecksumAddress],
    keccak256: {
      [Function: sha3] _Hash: [Object]
    },
    sha3: {
      [Function: sha3] _Hash: [Object]
    },
    toDecimal: [Function: hexToNumber],
    hexToNumber: [Function: hexToNumber],
    fromDecimal: [Function: numberToHex],
    numberToHex: [Function: numberToHex],
    hexToUtf8: [Function: hexToUtf8],
    hexToString: [Function: hexToUtf8],
    toUtf8: [Function: hexToUtf8],
    stringToHex: [Function: utf8ToHex],
    fromUtf8: [Function: utf8ToHex],
    utf8ToHex: [Function: utf8ToHex],
    toAscii: [Function: hexToAscii],
    fromAscii: [Function: asciiToHex],
    padLeft: [Function: leftPad],
    padRight: [Function: rightPad],
    getSignatureParameters: [Function: getSignatureParameters],
    isAddress: [Function: isAddress],
    isBN: [Function: isBN],
    checkAddressChecksum: [Function: checkAddressChecksum],
    toBN: [Function: toBN],
    toHex: [Function: toHex],
    hexToNumberString: [Function: hexToNumberString],
    toTwosComplement: [Function: toTwosComplement],
    isHex: [Function: isHex],
    isHexStrict: [Function: isHexStrict],
    isBloom: [Function: isBloom],
    isTopic: [Function: isTopic],
    bytesToHex: [Function: bytesToHex],
    hexToBytes: [Function: hexToBytes],
    soliditySha3: [Function: soliditySha3]
  },
  formatters: {
    inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
    inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
    inputCallFormatter: [Function: inputCallFormatter],
    inputTransactionFormatter: [Function: inputTransactionFormatter],
    inputAddressFormatter: [Function: inputAddressFormatter],
    inputPostFormatter: [Function: inputPostFormatter],
    inputLogFormatter: [Function: inputLogFormatter],
    inputSignFormatter: [Function: inputSignFormatter],
    outputBigNumberFormatter: [Function: outputBigNumberFormatter],
    outputTransactionFormatter: [Function: outputTransactionFormatter],
    outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
    outputBlockFormatter: [Function: outputBlockFormatter],
    outputLogFormatter: [Function: outputLogFormatter],
    outputPostFormatter: [Function: outputPostFormatter],
    outputSyncingFormatter: [Function: outputSyncingFormatter]
    isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
    txInputFormatter: [Function: txInputFormatter],
  },
  abiMapper: AbiMapper {
    utils: {
      randomHex: [Function: randomHex],
      jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
      hexToAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      getUnitValue: [Function: getUnitValue],
      fromWei: [Function: fromWei],
      toWei: [Function: toWei],
      toChecksumAddress: [Function: toChecksumAddress],
      keccak256: [Function],
      sha3: [Function],
      toDecimal: [Function: hexToNumber],
      hexToNumber: [Function: hexToNumber],
      fromDecimal: [Function: numberToHex],
      numberToHex: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      utf8ToHex: [Function: utf8ToHex],
      toAscii: [Function: hexToAscii],
      fromAscii: [Function: asciiToHex],
      padLeft: [Function: leftPad],
      padRight: [Function: rightPad],
      getSignatureParameters: [Function: getSignatureParameters],
      isAddress: [Function: isAddress],
      isBN: [Function: isBN],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toBN: [Function: toBN],
      toHex: [Function: toHex],
      hexToNumberString: [Function: hexToNumberString],
      toTwosComplement: [Function: toTwosComplement],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      isBloom: [Function: isBloom],
      isTopic: [Function: isTopic],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      soliditySha3: [Function: soliditySha3]
    },
    abiCoder: AbiCoder {
      utils: [Object],
      ethersAbiCoder: [AbiCoder]
    },
    contractModuleFactory: ContractModuleFactory {
      utils: [Object],
      formatters: [Object],
      abiCoder: [AbiCoder],
      accounts: [Accounts],
      methodModuleFactory: [ModuleFactory]
    },
    hasConstructor: false
  },
  options: {
    transactionSigner: TransactionSigner {
      utils: [Object],
      formatters: [Object]
    },
    data: '608060405234801561001057600080fd5b5060405161038c38038061038c83398101604052805101805161003a906000906020840190610041565b50506100dc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008257805160ff19168380011785556100af565b828001600101855582156100af579182015b828111156100af578251825591602001919060010190610094565b506100bb9291506100bf565b5090565b6100d991905b808211156100bb57600081556001016100c5565b90565b6102a1806100eb6000396000f30060806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663368b87728114610050578063e21f37ce146100ab575b600080fd5b34801561005c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100a99436949293602493928401919081908401838280828437509497506101359650505050505050565b005b3480156100b757600080fd5b506100c061014c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fa5781810151838201526020016100e2565b50505050905090810190601f1680156101275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80516101489060009060208401906101da565b5050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156101d25780601f106101a7576101008083540402835291602001916101d2565b820191906000526020600020905b8154815290600101906020018083116101b557829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061021b57805160ff1916838001178555610248565b82800160010185558215610248579182015b8281111561024857825182559160200191906001019061022d565b50610254929150610258565b5090565b61027291905b80821115610254576000815560010161025e565b905600a165627a7a72305820d3c37663128071be4403f6e3b214e2a9b575e6bc3bc4dcbbd56b3ef4baa907ce0029',
    address: '0x2FaF52A57E41b9eCee68966052FbD43c31c13EaE'
  },
  accounts: Accounts {
    providersModuleFactory: ProvidersModuleFactory {},
    providerDetector: ProviderDetector {},
    providerResolver: ProviderResolver {
      providersModuleFactory: ProvidersModuleFactory {}
    },
    givenProvider: null,
    _currentProvider: CustomProvider {
      host: 'CustomProvider',
      connection: [b]
    },
    _defaultAccount: undefined,
    _defaultBlock: 'latest',
    _transactionBlockTimeout: 50,
    _transactionConfirmationBlocks: 24,
    _transactionPollingTimeout: 750,
    _defaultGasPrice: undefined,
    _defaultGas: undefined,
    BatchRequest: [Function],
    transactionSigner: undefined,
    formatters: {
      outputBigNumberFormatter: [Function: outputBigNumberFormatter],
      isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
      inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
      inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
      txInputFormatter: [Function: txInputFormatter],
      inputCallFormatter: [Function: inputCallFormatter],
      inputTransactionFormatter: [Function: inputTransactionFormatter],
      inputSignFormatter: [Function: inputSignFormatter],
      outputTransactionFormatter: [Function: outputTransactionFormatter],
      outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
      outputBlockFormatter: [Function: outputBlockFormatter],
      inputLogFormatter: [Function: inputLogFormatter],
      outputLogFormatter: [Function: outputLogFormatter],
      inputPostFormatter: [Function: inputPostFormatter],
      outputPostFormatter: [Function: outputPostFormatter],
      inputAddressFormatter: [Function: inputAddressFormatter],
      outputSyncingFormatter: [Function: outputSyncingFormatter]
    },
    chainIdMethod: ChainIdMethod {
      utils: [Object],
      formatters: [Object],
      promiEvent: [PromiEvent],
      _arguments: [Object],
      _rpcMethod: 'eth_chainId',
      _parametersAmount: 0
    },
    getGasPriceMethod: GetGasPriceMethod {
      utils: [Object],
      formatters: [Object],
      promiEvent: [PromiEvent],
      _arguments: [Object],
      _rpcMethod: 'eth_gasPrice',
      _parametersAmount: 0
    },
    getTransactionCountMethod: GetTransactionCountMethod {
      utils: [Object],
      formatters: [Object],
      promiEvent: [PromiEvent],
      _arguments: [Object],
      _rpcMethod: 'eth_getTransactionCount',
      _parametersAmount: 2
    },
    defaultKeyName: 'web3js_wallet',
    accounts: {},
    accountsIndex: 0,
    wallet: Accounts {
      providersModuleFactory: ProvidersModuleFactory {},
      providerDetector: ProviderDetector {},
      providerResolver: [ProviderResolver],
      givenProvider: null,
      _currentProvider: [CustomProvider],
      _defaultAccount: undefined,
      _defaultBlock: 'latest',
      _transactionBlockTimeout: 50,
      _transactionConfirmationBlocks: 24,
      _transactionPollingTimeout: 750,
      _defaultGasPrice: undefined,
      _defaultGas: undefined,
      BatchRequest: [Function],
      transactionSigner: undefined,
      formatters: [Object],
      chainIdMethod: [ChainIdMethod],
      getGasPriceMethod: [GetGasPriceMethod],
      getTransactionCountMethod: [GetTransactionCountMethod],
      defaultKeyName: 'web3js_wallet',
      accounts: {},
      accountsIndex: 0,
      wallet: [Circular]
    }
  },
  methodFactory: MethodFactory {
    utils: {
      randomHex: [Function: randomHex],
      jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
      hexToAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      getUnitValue: [Function: getUnitValue],
      fromWei: [Function: fromWei],
      toWei: [Function: toWei],
      toChecksumAddress: [Function: toChecksumAddress],
      keccak256: [Function],
      sha3: [Function],
      toDecimal: [Function: hexToNumber],
      hexToNumber: [Function: hexToNumber],
      fromDecimal: [Function: numberToHex],
      numberToHex: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      utf8ToHex: [Function: utf8ToHex],
      toAscii: [Function: hexToAscii],
      fromAscii: [Function: asciiToHex],
      padLeft: [Function: leftPad],
      padRight: [Function: rightPad],
      getSignatureParameters: [Function: getSignatureParameters],
      isAddress: [Function: isAddress],
      isBN: [Function: isBN],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toBN: [Function: toBN],
      toHex: [Function: toHex],
      hexToNumberString: [Function: hexToNumberString],
      toTwosComplement: [Function: toTwosComplement],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      isBloom: [Function: isBloom],
      isTopic: [Function: isTopic],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      soliditySha3: [Function: soliditySha3]
    },
    formatters: {
      outputBigNumberFormatter: [Function: outputBigNumberFormatter],
      isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
      inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
      inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
      txInputFormatter: [Function: txInputFormatter],
      inputCallFormatter: [Function: inputCallFormatter],
      inputTransactionFormatter: [Function: inputTransactionFormatter],
      inputSignFormatter: [Function: inputSignFormatter],
      outputTransactionFormatter: [Function: outputTransactionFormatter],
      outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
      outputBlockFormatter: [Function: outputBlockFormatter],
      inputLogFormatter: [Function: inputLogFormatter],
      outputLogFormatter: [Function: outputLogFormatter],
      inputPostFormatter: [Function: inputPostFormatter],
      outputPostFormatter: [Function: outputPostFormatter],
      inputAddressFormatter: [Function: inputAddressFormatter],
      outputSyncingFormatter: [Function: outputSyncingFormatter]
    },
    contractModuleFactory: ContractModuleFactory {
      utils: [Object],
      formatters: [Object],
      abiCoder: [AbiCoder],
      accounts: [Accounts],
      methodModuleFactory: [ModuleFactory]
    },
    methodModuleFactory: ModuleFactory {
      subscriptionsFactory: [SubscriptionsFactory],
      formatters: [Object],
      utils: [Object]
    },
    abiCoder: AbiCoder {
      utils: [Object],
      ethersAbiCoder: [AbiCoder]
    }
  },
  abiModel: AbiModel {
    abi: {
      methods: [Object],
      events: {}
    }
  },
  transactionSigner: TransactionSigner {
    utils: {
      jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
      randomHex: [Function: randomHex],
      isBN: [Function: isBN],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      sha3: [Function],
      keccak256: [Function],
      soliditySha3: [Function: soliditySha3],
      isAddress: [Function: isAddress],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toChecksumAddress: [Function: toChecksumAddress],
      toHex: [Function: toHex],
      toBN: [Function: toBN],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      hexToNumberString: [Function: hexToNumberString],
      hexToNumber: [Function: hexToNumber],
      toDecimal: [Function: hexToNumber],
      numberToHex: [Function: numberToHex],
      fromDecimal: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      utf8ToHex: [Function: utf8ToHex],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      hexToAscii: [Function: hexToAscii],
      toAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      fromAscii: [Function: asciiToHex],
      toWei: [Function: toWei],
      fromWei: [Function: fromWei],
      padLeft: [Function: leftPad],
      padRight: [Function: rightPad],
      isBloom: [Function: isBloom],
      isTopic: [Function: isTopic],
      getUnitValue: [Function: getUnitValue],
      getSignatureParameters: [Function: getSignatureParameters],
      toTwosComplement: [Function: toTwosComplement]
    },
    formatters: {
      outputBigNumberFormatter: [Function: outputBigNumberFormatter],
      isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
      inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
      inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
      txInputFormatter: [Function: txInputFormatter],
      inputCallFormatter: [Function: inputCallFormatter],
      inputTransactionFormatter: [Function: inputTransactionFormatter],
      inputSignFormatter: [Function: inputSignFormatter],
      outputTransactionFormatter: [Function: outputTransactionFormatter],
      outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
      outputBlockFormatter: [Function: outputBlockFormatter],
      inputLogFormatter: [Function: inputLogFormatter],
      outputLogFormatter: [Function: outputLogFormatter],
      inputPostFormatter: [Function: inputPostFormatter],
      outputPostFormatter: [Function: outputPostFormatter],
      inputAddressFormatter: [Function: inputAddressFormatter],
      outputSyncingFormatter: [Function: outputSyncingFormatter]
    }
  },
  methods: MethodsProxy {
    contract: [Circular],
    methodFactory: MethodFactory {
      utils: [Object],
      formatters: [Object],
      contractModuleFactory: [ContractModuleFactory],
      methodModuleFactory: [ModuleFactory],
      abiCoder: [AbiCoder]
    },
    methodEncoder: MethodEncoder {
      abiCoder: [AbiCoder]
    },
    methodOptionsValidator: MethodOptionsValidator {
      utils: [Object]
    },
    methodOptionsMapper: MethodOptionsMapper {
      utils: [Object],
      formatters: [Object]
    }
  },
  events: EventSubscriptionsProxy {
    contract: [Circular],
    eventSubscriptionFactory: EventSubscriptionFactory {
      utils: [Object],
      formatters: [Object]
    },
    eventOptionsMapper: EventOptionsMapper {
      formatters: [Object],
      eventFilterEncoder: [EventFilterEncoder]
    },
    eventLogDecoder: EventLogDecoder {
      abiCoder: [AbiCoder]
    },
    allEventsLogDecoder: AllEventsLogDecoder {
      abiCoder: [AbiCoder]
    },
    allEventsOptionsMapper: AllEventsOptionsMapper {
      formatters: [Object],
      allEventsFilterEncoder: [AllEventsFilterEncoder]
    }
  }
}
